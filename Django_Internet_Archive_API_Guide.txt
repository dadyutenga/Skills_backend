
# Using the Internet Archive APIs in a Django Backend to Retrieve Articles

This guide explains how to use the Internet Archive APIs to retrieve articles from the Internet Archive and display them in a Django web application. We will leverage Python and Django to integrate these APIs.

---

## Prerequisites

- Python 3.6+
- Django 3.2+
- Requests library for Python (`pip install requests`)

---

## Step 1: Setup Django Project

1. Create a Django project and app:
   ```bash
   django-admin startproject archive_project
   cd archive_project
   python manage.py startapp archive_app
   ```

2. Add the app to the `INSTALLED_APPS` in `settings.py`:
   ```python
   INSTALLED_APPS = [
       ...,
       'archive_app',
   ]
   ```

---

## Step 2: Install Required Libraries

Install the `requests` library for making API calls:
```bash
pip install requests
```

For advanced integration, you can also install the `internetarchive` Python package:
```bash
pip install internetarchive
```

---

## Step 3: Fetch Articles Using the Internet Archive APIs

### 3.1 Using the Item Metadata API

The **Item Metadata API** fetches metadata for specific items by their unique identifier (`item_id`).

#### Example Function to Fetch Metadata:

```python
import requests

def fetch_item_metadata(item_id):
    url = f"https://archive.org/metadata/{item_id}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return None
```

### 3.2 Using the Search API

The **Search API** allows you to query for items matching specific criteria.

#### Example Function to Search for Articles:

```python
import requests

def search_articles(query, page=1):
    url = f"https://archive.org/advancedsearch.php"
    params = {
        'q': query,
        'fl[]': 'identifier,title,creator,description',
        'sort[]': 'downloads desc',
        'rows': 10,
        'page': page,
        'output': 'json'
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        return None
```

---

## Step 4: Integrate with Django Views

### Fetch Metadata for a Specific Article:

1. Create a Django view:
   ```python
   from django.http import JsonResponse
   from .services import fetch_item_metadata

   def article_metadata_view(request, item_id):
       data = fetch_item_metadata(item_id)
       if data:
           return JsonResponse(data)
       else:
           return JsonResponse({'error': 'Item not found'}, status=404)
   ```

2. Add a URL pattern:
   ```python
   from django.urls import path
   from . import views

   urlpatterns = [
       path('article/<str:item_id>/', views.article_metadata_view, name='article_metadata'),
   ]
   ```

### Search for Articles:

1. Create a service function for searching:
   ```python
   from .services import search_articles

   def article_search_view(request):
       query = request.GET.get('query', '')
       page = request.GET.get('page', 1)
       data = search_articles(query, page)
       if data:
           return JsonResponse(data)
       else:
           return JsonResponse({'error': 'No results found'}, status=404)
   ```

2. Add a URL pattern:
   ```python
   urlpatterns += [
       path('search/', views.article_search_view, name='article_search'),
   ]
   ```

---

## Step 5: Store Retrieved Data in the Database (Optional)

You can store retrieved metadata in your Django database for later use.

1. Define a model:
   ```python
   from django.db import models

   class Article(models.Model):
       identifier = models.CharField(max_length=200, unique=True)
       title = models.CharField(max_length=500)
       creator = models.CharField(max_length=200, null=True, blank=True)
       description = models.TextField(null=True, blank=True)
       fetched_at = models.DateTimeField(auto_now_add=True)
   ```

2. Update views to save data:
   ```python
   from .models import Article

   def save_article_metadata(metadata):
       article, created = Article.objects.update_or_create(
           identifier=metadata['identifier'],
           defaults={
               'title': metadata.get('title', ''),
               'creator': metadata.get('creator', ''),
               'description': metadata.get('description', ''),
           }
       )
       return article
   ```

---

## Step 6: Display Articles in the Frontend

In your Django templates or API responses, you can render the fetched data for users. If using React for the frontend, set up API endpoints as shown above and fetch the data using `axios` or `fetch`.

Example React API Fetch:
```javascript
import axios from 'axios';

function fetchArticles(query) {
    axios.get(`/search/?query=${query}`)
        .then(response => console.log(response.data))
        .catch(error => console.error('Error fetching articles:', error));
}
```

---

## References

1. [Internet Archive Item Metadata API](https://archive.org/developers/metadata-schema/)
2. [Internet Archive Search API](https://archive.org/developers/internetarchive/quickstart.html#searching)
3. [Django Documentation](https://docs.djangoproject.com/)
